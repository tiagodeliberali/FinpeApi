// <auto-generated />
using System;
using FinpeApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

namespace FinpeApi.Migrations
{
    [DbContext(typeof(FinpeDbContext))]
    [Migration("20180504000104_AddCreditCard")]
    partial class AddCreditCard
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-preview2-30571")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FinpeApi.Banks.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("FinpeApi.Banks.BankStatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BankId");

                    b.Property<DateTime>("ExecutionDate");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("BankStatements");
                });

            modelBuilder.Entity("FinpeApi.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("FinpeApi.CreditCards.CreditCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClosingDay");

                    b.Property<int>("EndNumbers");

                    b.Property<string>("Name");

                    b.Property<string>("Owner");

                    b.HasKey("Id");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("FinpeApi.CreditCards.CreditCardBill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CategoryId");

                    b.Property<int>("ClosingDay");

                    b.Property<int?>("CreditCardId");

                    b.Property<DateTime>("DueDate");

                    b.Property<bool>("Paid");

                    b.Property<DateTime>("PaymentDate");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreditCardId");

                    b.ToTable("CreditCardBills");
                });

            modelBuilder.Entity("FinpeApi.CreditCards.CreditCardStatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BillId");

                    b.Property<DateTime>("BuyDate");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.ToTable("CreditCardStatements");
                });

            modelBuilder.Entity("FinpeApi.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("DisplayName");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FacebookId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PhotoUrl");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FinpeApi.Statements.Statement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CategoryId");

                    b.Property<int>("Direction");

                    b.Property<DateTime>("DueDate");

                    b.Property<bool>("Paid");

                    b.Property<DateTime?>("PaymentDate");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Statements");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FinpeApi.Banks.BankStatement", b =>
                {
                    b.HasOne("FinpeApi.Banks.Bank", "Bank")
                        .WithMany("BankStatements")
                        .HasForeignKey("BankId");

                    b.OwnsOne("FinpeApi.ValueObjects.MoneyAmount", "Amount", b1 =>
                        {
                            b1.Property<int>("BankStatementId");

                            b1.Property<decimal>("Value")
                                .HasColumnName("Amount")
                                .HasColumnType("decimal(11, 2)");

                            b1.ToTable("BankStatements");

                            b1.HasOne("FinpeApi.Banks.BankStatement")
                                .WithOne("Amount")
                                .HasForeignKey("FinpeApi.ValueObjects.MoneyAmount", "BankStatementId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("FinpeApi.CreditCards.CreditCardBill", b =>
                {
                    b.HasOne("FinpeApi.Categories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("FinpeApi.CreditCards.CreditCard", "CreditCard")
                        .WithMany("Bills")
                        .HasForeignKey("CreditCardId");
                });

            modelBuilder.Entity("FinpeApi.CreditCards.CreditCardStatement", b =>
                {
                    b.HasOne("FinpeApi.CreditCards.CreditCardBill", "Bill")
                        .WithMany("Statements")
                        .HasForeignKey("BillId");

                    b.OwnsOne("FinpeApi.ValueObjects.MoneyAmount", "Amount", b1 =>
                        {
                            b1.Property<int?>("CreditCardStatementId");

                            b1.Property<decimal>("Value")
                                .HasColumnName("Amount")
                                .HasColumnType("decimal(11, 2)");

                            b1.ToTable("CreditCardStatements");

                            b1.HasOne("FinpeApi.CreditCards.CreditCardStatement")
                                .WithOne("Amount")
                                .HasForeignKey("FinpeApi.ValueObjects.MoneyAmount", "CreditCardStatementId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("FinpeApi.ValueObjects.StatementDescription", "Description", b1 =>
                        {
                            b1.Property<int>("CreditCardStatementId");

                            b1.Property<string>("Value")
                                .HasColumnName("Description");

                            b1.ToTable("CreditCardStatements");

                            b1.HasOne("FinpeApi.CreditCards.CreditCardStatement")
                                .WithOne("Description")
                                .HasForeignKey("FinpeApi.ValueObjects.StatementDescription", "CreditCardStatementId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("FinpeApi.Statements.Statement", b =>
                {
                    b.HasOne("FinpeApi.Categories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.OwnsOne("FinpeApi.ValueObjects.MoneyAmount", "Amount", b1 =>
                        {
                            b1.Property<int>("StatementId");

                            b1.Property<decimal>("Value")
                                .HasColumnName("Amount")
                                .HasColumnType("decimal(11, 2)");

                            b1.ToTable("Statements");

                            b1.HasOne("FinpeApi.Statements.Statement")
                                .WithOne("Amount")
                                .HasForeignKey("FinpeApi.ValueObjects.MoneyAmount", "StatementId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("FinpeApi.ValueObjects.StatementDescription", "Description", b1 =>
                        {
                            b1.Property<int>("StatementId");

                            b1.Property<string>("Value")
                                .HasColumnName("Description");

                            b1.ToTable("Statements");

                            b1.HasOne("FinpeApi.Statements.Statement")
                                .WithOne("Description")
                                .HasForeignKey("FinpeApi.ValueObjects.StatementDescription", "StatementId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FinpeApi.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FinpeApi.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FinpeApi.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FinpeApi.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
